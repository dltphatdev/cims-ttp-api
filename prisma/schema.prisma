// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserVerifyStatus {
  Unverified
  Verified
  Banned
}

enum UserRole {
  SuperAdmin
  Admin
  Sale
  Technician
  None
}

enum CustomerType {
  Personal
  Company
}

enum CustomerGender {
  Male
  Female
}

enum CustomerStatus {
  Active
  Deactivated
}

enum CustomerVerify {
  Unverified
  Verified
}

enum PerformanceStatus {
  New
  Approved
  Cancelled
}

enum TypeRevenue {
  OneTime
  EveryMonth
}

enum RevenueDirection {
  In // Doanh thu đầu vào
  Out // Chi phí, doanh thu đầu ra
}

enum ActivityStatus {
  New // Mới
  InProgress // Đang thực hiện
  Completed // Hoàn thành
  Cancelled // Hủy
}

model User {
  id                  Int                  @id @default(autoincrement())
  email               String               @unique
  password            String
  fullname            String?
  verify              UserVerifyStatus     @default(Unverified)
  avatar              String?              @db.VarChar(255)
  address             String?
  phone               String?
  code                String?
  refreshTokens       RefreshToken[]
  date_of_birth       DateTime?
  created_at          DateTime             @default(now())
  updated_at          DateTime?
  role                UserRole             @default(None)
  creatorCustomers    Customer[] // 1 user - n customer 
  consultantCustomers CustomerConsultant[] // 1 user tư vấn - n customer
  creatorPerformance  Performance[] // 1 user - n hiệu quả
  creatorActivity     Activity[]
  attachments         Gallery[] // Danh sách file attachments
  documents           Document[] // 1 user - n document

  @@index([email, password])
  @@map("user")
}

model RefreshToken {
  id      Int      @id @default(autoincrement())
  token   String   @unique @db.VarChar(512)
  user_id Int
  iat     DateTime
  exp     DateTime
  user    User     @relation(fields: [user_id], references: [id])

  @@index([exp])
  @@map("refreshtoken")
}

model Customer {
  id                   Int                  @id @default(autoincrement())
  name                 String               @unique @db.VarChar(255)
  type                 CustomerType         @default(Company)
  gender               CustomerGender?
  email                String?              @unique @db.VarChar(255)
  phone                String?              @db.VarChar(255)
  address_company      String?              @db.VarChar(255)
  address_personal     String?              @db.VarChar(255)
  note                 String?              @db.Text
  attachment           String?              @db.VarChar(255)
  tax_code             String?              @unique @db.VarChar(255)
  cccd                 String?              @unique @db.VarChar(255)
  website              String?              @db.VarChar(255)
  surrogate            String?              @db.VarChar(255)
  contact_name         String?              @db.VarChar(255)
  date_of_birth        DateTime?
  status               CustomerStatus       @default(Deactivated)
  verify               CustomerVerify       @default(Unverified)
  creator_id           Int
  created_at           DateTime             @default(now())
  updated_at           DateTime?
  creator              User                 @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  consultantor         CustomerConsultant[] // Danh sách người tư vấn 
  customersPerformance Performance[] // Danh sách sách hiệu quả 
  attachments          Gallery[] // Danh sách file attachments

  @@map("customer")
}

model Gallery {
  id          Int       @id @default(autoincrement())
  customer_id Int?
  user_id     Int?
  document_id Int?
  filename    String    @unique @db.VarChar(255)
  version     Int?      @default(0)
  created_at  DateTime  @default(now())
  document    Document? @relation(fields: [document_id], references: [id], onDelete: Cascade)
  customer    Customer? @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user        User?     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("gallery")
}

model Performance {
  id                 Int               @id @default(autoincrement())
  name               String            @unique @db.VarChar(255)
  status             PerformanceStatus @default(New)
  creator_id         Int // Người tạo ra hiệu quả công việc
  customer_id        Int // Khách hàng đang tư vấn
  note               String?           @db.Text
  assign_at          DateTime? // Xem thời điểm mà khách hàng được add tag
  operating_cost     Float             @default(0) // Chi phí vận hành (%)
  customer_care_cost Float             @default(0) // Chi phí CSKH (%)
  commission_cost    Float             @default(0) // Chi phí hoa hồng (%)
  diplomatic_cost    Float             @default(0) // Chi phí ngoại giao (%)
  reserve_cost       Float             @default(0) // Chi phí dự phòng (%)
  customer_cost      Float             @default(0) // Chi phí khách hàng (%)
  created_at         DateTime          @default(now())
  updated_at         DateTime?
  creator            User              @relation(fields: [creator_id], references: [id], onDelete: Cascade)
  customer           Customer?         @relation(fields: [customer_id], references: [id])
  revenues           Revenue[] // Danh sách doanh thu 

  @@map("performance")
}

model Revenue {
  id             Int              @id @default(autoincrement())
  name           String           @db.VarChar(255) // Hạng mục
  description    String?          @db.Text // Diễn giải
  unit_caculate  String?          @db.VarChar(255) // Đơn vị tính dạng string 
  type           TypeRevenue      @default(OneTime) // Loại doanh thu 
  performance_id Int
  price          Decimal          @db.Decimal(15, 2) // Đơn giá
  quantity       Int              @default(1)
  direction      RevenueDirection @default(In) // Xác định đây là doanh thu gì
  performance    Performance      @relation(fields: [performance_id], references: [id])
  created_at     DateTime         @default(now())
  updated_at     DateTime?

  @@map("revenue")
}

model Activity {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(255)
  phone        String?        @db.VarChar(255)
  address      String?        @db.VarChar(255)
  contact_name String?        @db.VarChar(255)
  creator_id   Int
  status       ActivityStatus @default(New)
  content      String?        @db.Text
  time_start   DateTime?
  time_end     DateTime?
  created_at   DateTime       @default(now())
  updated_at   DateTime?
  creator      User           @relation(fields: [creator_id], references: [id], onDelete: Cascade)

  @@map("activity")
}

model CustomerConsultant {
  id          Int      @id @default(autoincrement())
  customer_id Int
  user_id     Int
  assigned_at DateTime @default(now()) @updatedAt
  customer    Customer @relation(fields: [customer_id], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("customerconsultant")
}

model Document {
  id          Int       @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?   @db.Text
  creator_id  Int
  attachments Gallery[]
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  creator     User      @relation(fields: [creator_id], references: [id], onDelete: Cascade)

  @@map("document")
}
